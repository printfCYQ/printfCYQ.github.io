<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>photo</title>
      <link href="2021/04/07/photo/"/>
      <url>2021/04/07/photo/</url>
      
        <content type="html"><![CDATA[<p><img src="/.io//array.png" alt="这是代替图片的文字，随便写"><br><span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> img </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现太空船动画</title>
      <link href="2021/04/07/CSS-%E5%A4%AA%E7%A9%BA%E8%88%B9%E5%8A%A8%E7%94%BB/"/>
      <url>2021/04/07/CSS-%E5%A4%AA%E7%A9%BA%E8%88%B9%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<p>Welcome to [Hexo]</p><h1 id="CSS-实现太空船动画"><a href="#CSS-实现太空船动画" class="headerlink" title="CSS-实现太空船动画"></a>CSS-实现太空船动画</h1><h2 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h2><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;    &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;    &lt;title&gt;Document&lt;/title&gt;   &lt;link rel="stylesheet" href="index.css"&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class="spaceship"&gt;        &lt;div class="spaceshipBody"&gt;           &lt;div class="spaceshipTop"&gt;&lt;/div&gt;           &lt;div class="spaceshipWindows"&gt;              &lt;span&gt;&lt;/span&gt;              &lt;span&gt;&lt;/span&gt;           &lt;/div&gt;        &lt;/div&gt;        &lt;div class="spaceshipBottom"&gt;           &lt;span&gt;&lt;/span&gt;           &lt;span&gt;&lt;/span&gt;           &lt;span&gt;&lt;/span&gt;        &lt;/div&gt;        &lt;div class="fire"&gt;           &lt;span&gt;&lt;/span&gt;           &lt;span&gt;&lt;/span&gt;           &lt;span&gt;&lt;/span&gt;           &lt;div class="glow"&gt;&lt;/div&gt;        &lt;/div&gt;     &lt;/div&gt;     &lt;div class="shadow"&gt;&lt;/div&gt;     &lt;div class="buttons"&gt;        &lt;button class="btnStart"&gt;&lt;span&gt;start&lt;/span&gt;&lt;/button&gt;        &lt;button class="btnLaunch"&gt;&lt;span&gt;launch&lt;/span&gt;&lt;/button&gt;        &lt;button disabled="disabled" class="btnLand disable"&gt;&lt;span&gt;land&lt;/span&gt;&lt;/button&gt;     &lt;/div&gt;       &lt;/body&gt;&lt;script src="index.js"&gt;&lt;/script&gt;&lt;/html&gt;</code></pre><h2 id="index-css"><a href="#index-css" class="headerlink" title="index.css"></a>index.css</h2><pre><code>body {    margin: 0;    padding: 0;    display: flex;    align-items: center;    justify-content: center;    height: 100vh;    width: 100%;    background-color: #0f1b31;  }    .spaceship {    width: 300px;    height: 300px;    display: flex;    justify-content: center;    align-items: center;    position: absolute;    transition: all 2s ease;    bottom: 130px;    animation: float 2s ease infinite alternate;  }  @keyframes float {    0% {      transform: translateY(10px);    }    100% {      transform: translateY(0px);    }  }  .spaceship.launch {    bottom: 120%;    animation: launch 3s ease;  }  @keyframes launch {    0% {      bottom: 130px;      transform: translatex(2px);    }    10% {      transform: translatex(-2px);    }    20% {      transform: translatex(2px);    }    30% {      transform: translatex(-2px);    }    60% {      transform: translatex(0px);      bottom: 150px;    }    100% {      bottom: 120%;    }  }  .spaceship.land {    bottom: 130px;    animation: land 3s ease;  }  @keyframes land {    0% {      bottom: 120%;    }    50% {      bottom: 180px;    }    100% {      bottom: 130px;    }  }  .spaceship .spaceshipBody {    width: 35%;    height: 80%;    background-color: white;    border-bottom-left-radius: 100%;    border-bottom-right-radius: 100%;    border-top-left-radius: 100%;    border-top-right-radius: 100%;    display: flex;    justify-content: center;    position: relative;    z-index: 1;    box-shadow: inset 0px -173px 0px -80px white, inset 0px -213px 0px -60px #e4e4e4;  }  .spaceship .spaceshipBody:before {    content: "";    position: absolute;    width: calc(100% - 36px);    height: 42%;    background-color: inherit;    bottom: -30px;    transform: perspective(10em) rotateX(-50deg);    border-bottom-left-radius: 50px;    border-bottom-right-radius: 50px;    box-shadow: inset 0px -33px 0px 0px rgba(0, 0, 0, 0.1);  }  .spaceship .spaceshipBody:after {    content: "";    position: absolute;    width: 45%;    height: 40px;    background-color: #f95959;    bottom: -20px;    transform: perspective(10em) rotateX(-50deg);    border-bottom-left-radius: 50px;    border-bottom-right-radius: 50px;    z-index: -1;  }  .spaceship .spaceshipBody .spaceshipTop {    width: 100%;    height: 240px;    border-radius: 100%;    overflow: hidden;    position: relative;    box-shadow: inset -12px 17px 0px -7px rgba(0, 0, 0, 0.15);  }  .spaceship .spaceshipBody .spaceshipTop:before {    content: "";    background-color: #4ba3b7;    position: absolute;    width: 100%;    height: 100px;    left: calc(50% - 54%);    border-radius: 100%;    top: -55px;    border: 2px solid white;    box-shadow: inset -18px 56px 0px 3px rgba(0, 0, 0, 0.1), 0px 0px 0px 6px #f95959;  }  .spaceship .spaceshipBody .spaceshipWindows {    display: flex;    justify-content: center;    align-items: center;    width: 300px;    height: 300px;    position: absolute;  }  .spaceship .spaceshipBody .spaceshipWindows span {    background-color: #ace7ef;    box-shadow: inset -4px 4px 0px 0px rgba(0, 0, 0, 0.3), inset 0px 0px 0px 2px white;    border: 4px solid #f95959;    z-index: 2;    position: absolute;    border-radius: 100%;    overflow: hidden;  }  .spaceship .spaceshipBody .spaceshipWindows span:before {    position: absolute;    content: "";    background-color: white;    width: 200%;    height: 100%;    transform: rotate(45deg);    opacity: 0.4;  }  .spaceship .spaceshipBody .spaceshipWindows span:nth-child(1) {    width: 30px;    height: 30px;    top: 23%;  }  .spaceship .spaceshipBody .spaceshipWindows span:nth-child(1):before {    top: 10px;    right: 0px;  }  .spaceship .spaceshipBody .spaceshipWindows span:nth-child(2) {    width: 45px;    height: 45px;    top: 40%;  }  .spaceship .spaceshipBody .spaceshipWindows span:nth-child(2):before {    top: 12px;    right: 0px;  }  .spaceship .spaceshipBottom {    display: flex;    justify-content: center;    align-items: center;    width: 300px;    height: 300px;    position: absolute;  }  .spaceship .spaceshipBottom span {    background-color: #4ba3b7;    border-radius: 10px;    position: absolute;    overflow: hidden;  }  .spaceship .spaceshipBottom span:before {    content: "";    position: absolute;    background-color: white;    width: 2px;    height: 120%;    border-radius: 20px;  }  .spaceship .spaceshipBottom span:nth-child(1) {    width: 15px;    height: 80px;    z-index: 2;    bottom: 2%;    box-shadow: inset -5px -3px 0px 0px rgba(0, 0, 0, 0.18);  }  .spaceship .spaceshipBottom span:nth-child(1):before {    display: none;  }  .spaceship .spaceshipBottom span:nth-child(2) {    width: 50px;    height: 130px;    left: 32%;    bottom: 6%;    transform: perspective(10em) rotateX(60deg) translateZ(-1px);    box-shadow: inset -5px -3px 0px 0px rgba(0, 0, 0, 0.2);  }  .spaceship .spaceshipBottom span:nth-child(2):before {    left: 0px;    border-right: 2px solid #f95959;  }  .spaceship .spaceshipBottom span:nth-child(3) {    width: 50px;    height: 130px;    right: 32%;    bottom: 6%;    transform: perspective(10em) rotateX(60deg) translateZ(-1px);    box-shadow: inset -5px -3px 0px 0px rgba(0, 0, 0, 0.2);  }  .spaceship .spaceshipBottom span:nth-child(3):before {    right: 0px;    border-left: 2px solid #f95959;  }  .spaceship .fire {    display: flex;    justify-content: center;    align-items: center;    width: 300px;    height: 100px;    position: absolute;    bottom: -50px;  }  .spaceship .fire.burn span {    border-radius: 50px;    top: 0;    position: absolute;    background-color: #ffd460;    height: inherit;    animation: fire 0.8s ease infinite alternate;  }  .spaceship .fire.burn span:nth-child(1) {    width: 6px;    height: 40px;    left: 44%;    transform: translateY(27px);    box-shadow: inset 0px -7px 10px #ea5455, inset 0px -19px 10px #ffc175, 0px -7px 10px #ea5455;    animation-delay: 0.2s;  }  .spaceship .fire.burn span:nth-child(1):after {    position: absolute;    content: "";    width: 4px;    height: 60%;    border-radius: 50px;    background-color: #ffd460;    bottom: 0;    transform: translate(8px, 15px);    box-shadow: inset 0px -5px 10px #ea5455, inset 0px -19px 10px #ffc175, 0px -7px 10px #ea5455;  }  .spaceship .fire.burn span:nth-child(2) {    width: 10px;    height: 60px;    left: calc(50% - 8px);    transform: translateY(35px);    box-shadow: inset 0px -10px 10px #ea5455, inset 0px -30px 10px #ffc175, 0px -7px 10px #ea5455;  }  .spaceship .fire.burn span:nth-child(2):after {    position: absolute;    content: "";    width: 10px;    height: 100%;    border-radius: 10px;    background-color: #ffd460;    top: 0;    transform: translate(-6px, -25px);    box-shadow: inset 0px -5px 10px #ea5455, inset 0px -15px 10px #ffc175, 0px -7px 10px #ea5455;  }  .spaceship .fire.burn span:nth-child(3) {    width: 10px;    height: 40px;    right: 45%;    transform: translateY(27px);    box-shadow: inset 0px -5px 10px #ea5455, inset 0px -30px 10px #ffc175, 0px -7px 10px #ea5455;    animation-delay: 0.4s;  }  .spaceship .fire.burn span:nth-child(3):after {    position: absolute;    content: "";    width: 6px;    height: 180%;    border-radius: 10px;    background-color: #ffd460;    top: 0;    transform: translate(-6px, -15px);    box-shadow: inset 0px -5px 10px #ea5455, inset 0px -20px 10px #ffc175, 0px -7px 10px #ea5455;  }  @keyframes fire {    0% {      height: 10px;      bottom: 0;    }      50% {        top: 0;      }      100% {        height: 20px;        bottom: 0;      }    }  .spaceship .fire.burn .glow {    position: absolute;    width: 0px;    height: 0px;    border-radius: 100%;    box-shadow: 0px 0px 50px 20px #ea5455;    opacity: 1;    animation: glow 0.8s ease infinite alternate;  }  @keyframes glow {    0% {      box-shadow: 0px 0px 50px 20px #ea5455;    }    100% {      box-shadow: 0px 0px 50px 25px #ea5455;    }  }  .shadow {    width: 150px;    height: 30px;    background-color: black;    position: absolute;    border-radius: 100%;    opacity: 0.2;    bottom: 80px;    z-index: -1;    animation: shadow 2s ease infinite alternate;    transition: all 0.5s ease;  }  @keyframes shadow {    0% {      width: 150px;    }    100% {      width: 120px;    }  }  .buttons {    position: absolute;    display: flex;    flex-direction: column;    justify-content: space-around;    top: 20px;    left: 20px;  }  .buttons button {    width: 100px;    height: 40px;    background-color: #4ba3b7;    border: 0;    margin: 8px;    color: white;    position: relative;    overflow: hidden;    font-size: 12px;    letter-spacing: 1px;    font-weight: 500;    text-transform: uppercase;    transition: all 0.3s ease;    cursor: pointer;    border-radius: 3px;  }  .buttons button.active {    background-color: #f95959;  }  .buttons button.active:hover {    letter-spacing: 1px;    color: white;    background-color: #bf4c4c;  }  .buttons button.active:hover:before, .buttons button.active:hover:after {    width: 0;  }  .buttons button.active:hover span:before, .buttons button.active:hover span:after {    height: 0;  }  .buttons button.disable {    background-color: grey;    opacity: 0.3;    cursor: auto;  }  .buttons button.disable:hover {    letter-spacing: 1px;    color: white;  }  .buttons button.disable:hover:before, .buttons button.disable:hover:after {    width: 0;  }  .buttons button.disable:hover span:before, .buttons button.disable:hover span:after {    height: 0;  }  .buttons button:before {    content: "";    position: absolute;    width: 0;    height: 2px;    background-color: #ace7ef;    transition: all 0.4s ease;    left: 0;    top: 0;  }  .buttons button:after {    content: "";    position: absolute;    width: 0;    height: 2px;    background-color: #ace7ef;    transition: all 0.4s 0.2s ease;    right: 0;    bottom: 0;  }  .buttons button span {    width: 100%;    height: 100%;    position: absolute;    left: 0;    top: 0;    display: flex;    align-items: center;    justify-content: center;  }  .buttons button span:before {    content: "";    position: absolute;    width: 2px;    height: 0;    background-color: #ace7ef;    transition: all 0.4s 0.3s ease;    left: 0;    top: 0;  }  .buttons button span:after {    content: "";    position: absolute;    width: 2px;    height: 0;    background-color: #ace7ef;    transition: all 0.4s 0.4s ease;    right: 0;    bottom: 0;  }  .buttons button:hover {    color: #ace7ef;    letter-spacing: 2px;  }  .buttons button:hover:before, .buttons button:hover:after {    width: 100%;  }  .buttons button:hover span:before, .buttons button:hover span:after {    height: 100%;  }  .buttons button:active {    outline: none;    border: none;  }  .buttons button:focus {    outline: 0;  }  </code></pre><h2 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h2><pre><code>var spaceship = document.querySelector(".spaceship"),    fire = document.querySelector(".fire"),    btnLaunch = document.querySelector(".btnLaunch"),    btnLand = document.querySelector(".btnLand"),    btnStart = document.querySelector(".btnStart"),    txtLaunch = document.querySelector(".btnLaunch span"),    txtLand = document.querySelector(".btnLand span"),    txtStart = document.querySelector(".btnStart span"),    shadow = document.querySelector(".shadow");btnLaunch.addEventListener("click", launch);btnLand.addEventListener("click", land);btnStart.addEventListener("click", start);function launch() {   btnStart.classList.add("disable");   fire.classList.add("burn");   spaceship.classList.remove("land");   spaceship.classList.add("launch");   spaceship.removeEventListener("animationend", burn);   shadow.style.opacity = "0";   /*buttons*/   btnLaunch.classList.add("active");   btnStart.disabled = true;   btnStart.classList.remove("active");   btnLand.classList.remove("active");   btnLand.classList.remove("disable");   btnLand.disabled = false;   /*text buttons*/   txtLaunch.innerText = "launched!";   txtStart.innerText = "start";   txtLand.innerText = "land";}function land() {   spaceship.classList.remove("launch");   spaceship.classList.add("land");   spaceship.addEventListener("animationend", burn);     /*buttons*/   btnLaunch.classList.remove("active");   btnLand.classList.add("active");   btnStart.classList.remove("disable");   btnStart.disabled = false;   /*text buttons*/   txtLand.innerText = "landed!";   txtLaunch.innerText = "launch";}function burn() {   fire.classList.remove("burn");   spaceship.classList.remove("land");   shadow.style.opacity = "0.2";   /*buttons*/   btnLand.classList.remove("active");   btnLand.classList.add("disable");   btnLand.disabled = true;   /*text buttons*/   txtLand.innerText = "land";}function start() {   if (btnStart.classList.contains("active")) {      fire.classList.remove("burn");      btnStart.classList.remove("active");      txtStart.innerText = "start";   } else {      fire.classList.add("burn");      btnStart.classList.add("active");      txtStart.innerText = "stop";      btnLand.classList.remove("active");   }}function stop() {   fire.classList.remove("burn");}</code></pre>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/04/06/hello-world/"/>
      <url>2021/04/06/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to [Hexo]</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code>hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> es6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序开发遇到的那些坑</title>
      <link href="2021/04/06/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%9D%91/"/>
      <url>2021/04/06/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p>Welcome to [Hexo]</p><h1 id="微信小程序开发遇到的那些坑"><a href="#微信小程序开发遇到的那些坑" class="headerlink" title="微信小程序开发遇到的那些坑"></a>微信小程序开发遇到的那些坑</h1><h2 id="一、Webview-内嵌-H5-页面不可以使用微信支付"><a href="#一、Webview-内嵌-H5-页面不可以使用微信支付" class="headerlink" title="一、Webview 内嵌 H5 页面不可以使用微信支付"></a>一、Webview 内嵌 H5 页面不可以使用微信支付</h2><p>小程序的 web-view 不支持微信支付，只能通过跳回小程序调用小程序支付的 API。实现大体思路：在 H5 页面获取支付参数，然后判断是否在小程序环境中，如果在，获取到支付参数后返回到小程序并将支付参数传给小程序，小程序调用 wx.requestPayment(OBJECT)接口完成支付，需要注意的是，获取支付参数的 appId 为小程序的 appId.下面是解决方案：</p><ul><li>在 H5 页面引入 JSSDK 1.3.2,判断小程序环境，获取支付参数，将支付参数返回给小程序，这里需要注意的是“package”参数，因为其包含“=”，因此传的时候注意使用 encodeURIComponent 编码，获取后 decodeURIComponent 解码</li><li>在小程序新建一个空白 page,在 onLoad 中获取参数，获取成功后发起微信支付请求</li><li>支付完成，处理相关逻辑</li></ul><h2 id="二、小程序获取不到-unionId"><a href="#二、小程序获取不到-unionId" class="headerlink" title="二、小程序获取不到 unionId"></a>二、小程序获取不到 unionId</h2><p>在小程序发布到线上之后发现有些新用户在登录页面卡死，最后发现是没有获取到 unionId,为什么获取不到 unionId 呢，看下微信对 UnionId 机制的原文解释：<br>如果开发者拥有多个移动应用、网站应用、和公众帐号（包括小程序），可通过 unionid 来区分用户的唯一性，因为只要是同一个微信开放平台帐号下的移动应用、网站应用和公众帐号（包括小程序），用户的 unionid 是唯一的。换句话说，同一用户，对同一个微信开放平台下的不同应用，unionid 是相同的。</p><p>同一个微信开放平台下的相同主体的 App、公众号、小程序，如果用户已经关注公众号，或者曾经登录过 App 或公众号，则用户打开小程序时，开发者可以直接通过 wx.login 获取到该用户 UnionID，无须用户再次授权。</p><p><strong>注意： 后边这句话的描述</strong></p><p>用户关注过公众号，或者曾经登录过 App 或公众号，则用户打开小程序时，开发者可以直接通过 wx.login 获取到该用户 UnionID<br><strong>即：如果用户没有关注过公众号，或者没有登陆过 App，通过 wx.login 是无法获取到该用户 UnionID，只能通过 wx.getUserInfo 来获取 UnionId</strong><br>经验证，系统不存在 UnionId 的小程序用户都是没有关注公众号或未在 App 中使用微信授权的用户<br>解决方案：<br>获取小程序 UnionId 获取不到时，wx.getUserInfo 可以获取敏感数据，其中包含 UnionId 字段。</p><h2 id="三、扫普通链接二维码打开小程序"><a href="#三、扫普通链接二维码打开小程序" class="headerlink" title="三、扫普通链接二维码打开小程序"></a>三、扫普通链接二维码打开小程序</h2><p>（使用该功能，小程序必须已经是已发布状态）小程序提供了扫描普通二维码跳转小程序的功能，首先在微信公众平台配置二维码规则，域名路径必须是校验文件所在路径，可以配置测试链接进行测试，可以配置最多 5 个测试链接，可以指定测试链接打开的测试范围（开发、测试、正式），必须是具有体验权限的用户才可以进行测试，非体验用户进入正式版本。规则发布后，配置符合规则的链接均可进入到小程序。</p><h2 id="四、可拖拽元素遇上-canvas-二维码"><a href="#四、可拖拽元素遇上-canvas-二维码" class="headerlink" title="四、可拖拽元素遇上 canvas 二维码"></a>四、可拖拽元素遇上 canvas 二维码</h2><p>刚开始做这个可拖拽元素的时候，是准备将其做成一个组件，在每个需要的地方引入即可，但是有一个很大的问题就是所在页面有一个 canvas 生成的二维码，原生组件在小程序中的层级是最高的，即不管怎么布局或者给 z-index 都是不生效的，所以拖拽元素拖拽过程中会在二维码下面。</p><p>解决这个问题的过程中遇到了很多坑，首先想到的是小程序中有没有直接生成二维码图片的插件，有是有，但是我的字符串太长了，生成的 base64 编码均太长了，所以我还是用的 weapp-qrcode.js 插件，这个插件自带导出图片的方法，用的就是 wx.canvasToTempFilePath 将画布导出生成图片，页面上 canvas 所在位置放置一个 image 组件，将 canvas 移到可视区域外面，但是生成的图片一直是乱的，原来是我没给 canvas 样式的高度和宽度导致生成出现问题，但是这样还是在一些安卓机上出现问题，调用 wx.canvasToTempFilePath 已经是在 draw 回调之后了，但是还是需要给延时才可以，在这里我给的 500ms,基本上就可以了。</p><p>原生组件层级最高的问题解决了，但是又出现一个问题，就是可拖拽元素是一个组件，所在页面又有很多按钮，如果直接将可拖拽组件的层级设置最高，那么按钮就不可点击，如果不设置最高，那么就不可拖拽了，有两种方式可以解决，一种是将按钮以插槽的方式放在组件中，另一种是不将拖拽元素写成组件，之间将 movable-area 放在 wxml 的最外层，我采用的是第二种，如果每个按钮都写成插槽的话维护起来太麻烦了。</p><h2 id="五、微信小程序缓存——-缓存时效性"><a href="#五、微信小程序缓存——-缓存时效性" class="headerlink" title="五、微信小程序缓存——-缓存时效性"></a>五、微信小程序缓存——-缓存时效性</h2><pre><code>/** * 数据缓存没有设置有效期 */class Storage {  /**   * 获取缓存   * @param String $key  key   * @param String $def  若想要无缓存时，返回默认值则get('key','默认值')（支持字符串、json、数组、boolean等等）   * @return value;   */  get(key, def = '') {    const timeout = parseInt(wx.getStorageSync(`${key}__separator__`) || 0);    // 过期失效    if (timeout) {      if (Date.now() &gt; timeout) {        this.remove(key);        return;      }    }    let value = wx.getStorageSync(key);    return value ? value : def;  }  /**   * 设置缓存   * @param String $key       key   * @param String $value     value（支持字符串、json、数组、boolean等等）   * @param Number $timeout   过期时间（单位：分钟）不设置时间即为永久保存   * @return value;   */  put(key, value, timeout = 0) {    let _timeout = parseInt(timeout);    wx.setStorageSync(key, value);    if (_timeout) {      wx.setStorageSync(`${key}__separator__`, Date.now() + 1000 * 60 * _timeout);    } else {      wx.removeStorageSync(`${key}__separator__`);    }    return value;  }  remove(key) {    wx.removeStorageSync(key);    wx.removeStorageSync(`${key}__separator__`);    return undefined;  }}export {  Storage}</code></pre><h2 id="六、小程序跳转另小程序遇到的坑（监听返回）"><a href="#六、小程序跳转另小程序遇到的坑（监听返回）" class="headerlink" title="六、小程序跳转另小程序遇到的坑（监听返回）"></a>六、小程序跳转另小程序遇到的坑（监听返回）</h2><p>场景：在跳转另一个小程序之前需要调用接口获取跳转所需参数，在另一个小程序返回时需要重新调用接口或许参数。</p><p>问题：首先想到的是点击跳转的时候调用接口，之后 wx.navigateToMiniProgram 跳转，将接口返回数据携带上，但是，这种不是用户直接触发的跳转，微信不支持。</p><p>然后，那就先在页面的 onload 事件中直接调用一次，然后再监听另一个小程序返回，再调用一次接口，文档上写的很明白，监听 App.onShow 就好了，于是我在该页面的 onshow 直接 wx.onAppShow 监听场景值为 1038，但是！！！这里遇到了巨坑，第一次返回，wx.onAppShow 调用一次，第二次返回，wx.onAppShow 调用两次，第三次返回，wx.onAppShow 调用三次，直接导致整个流程出问题了。</p><p>解决：思考了好久，决定不用 wx.onAppShow 监听场景值的办法，直接在该页面直接定义一个变量，比如 navigateToOther,默认为 false,跳转成功后置为 true，然后在 onshow 里判断是否为 true，如果为 true，调用接口，将 navigateToOther 置为 false。完美解决！</p><h2 id="七、小程序-H5-页面分享"><a href="#七、小程序-H5-页面分享" class="headerlink" title="七、小程序 H5 页面分享"></a>七、小程序 H5 页面分享</h2><p>H5 页面中的分享转发按钮不能直接分享给好友，只能用折中的方式来做，点击 H5 页面的分享按钮时，弹出提示框，指向右上角的转发按钮，并通过 wx.miniProgram.postMessage 将所需信息发送给小程序，用户点击转发按钮时可以通过 bindmessage 接收到消息。</p><h2 id="八、webview-刷新"><a href="#八、webview-刷新" class="headerlink" title="八、webview 刷新"></a>八、webview 刷新</h2><p>小程序嵌套 H5 页面时，有时页面在来回切换时需要刷新该 H5 页面，但是微信未提供相关接口，但是可以通过折中的方式来实现。</p><p>首先，让 webview 做条件渲染：</p><pre><code>&lt;web-view wx:if="{{url}}" src="{{url}}" /&gt;  data: {    base_url: config.kalatong_base_url + '……',    url: ''  },  /**   * 生命周期函数--监听页面加载   */  onLoad: function(options) {    let url = this.data.base_url + "#wechat_redirect"    this.data.url = decodeURIComponent(url)  },  /**   * 生命周期函数--监听页面显示   */  onShow: function() {    this.refreshWebview()  },</code></pre><p>需要刷新时，先把 url 设为空，销毁当前 webview。然后再把 url 设为当前值。如下：</p><pre><code>refreshWebview: function () {    let tmpUrl = this.data.url;    this.setData({      url: ''    });    setTimeout(() =&gt; {      this.setData({        url: tmpUrl      })    }, 500);  }</code></pre><p>这样便可以在不影响导航栏历史的情况下刷新页面，也可以是跳转 url。</p><p>这里 setData 之后，页面内容的更新应该是异步执行的，因此我们后一次修改 url 需要延时一小段时间，否则会出现 error。</p><p>猜测 setData 后页面实际更新应该是在下一次的 requestAnimationFrame，因此如果页面完全不卡顿可能 16ms 就可以了，保险起见，我设了 100ms。<br>但是 100ms 也不保险，有些页面会空白，最后置成 500ms。</p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现2048小游戏</title>
      <link href="2021/04/05/JS-2048%E5%B0%8F%E6%B8%B8%E6%88%8F/"/>
      <url>2021/04/05/JS-2048%E5%B0%8F%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<p>Welcome to [Hexo]</p><h1 id="JS-实现2048小游戏"><a href="#JS-实现2048小游戏" class="headerlink" title="JS-实现2048小游戏"></a>JS-实现2048小游戏</h1><h2 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h2><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;script src="index.js"&gt;&lt;/script&gt;    &lt;link href="index.css" rel="stylesheet" /&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id="my2048"&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="index-css"><a href="#index-css" class="headerlink" title="index.css"></a>index.css</h2><pre><code>body, div, span, a {    margin: 0;    padding: 0;}#my2048 {    margin-left: auto;    margin-right: auto;    margin-top: 300px;    position: relative;    background: #bbada0;}#my2048 div {    position: absolute;    display: inline-block;    border: 0px;}</code></pre><h2 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h2><pre><code>var my2048;var rows = 4;var cols = 4;var squareWidth = 100;var spacing = 12;var boardSet = [];var squareSet = [];var valueMap = [];var colorMapping = {"0": "#ccc0b3", "2": "#eee4da", "4": "#ede0c8", "8": "#f2b179", "16": "#f59563", "32": "#f67e5f", "64": "#f65e3b", "128": "#edcf72", "256" : "#edcc61", "512": "#9c0", "1024": "#33b5e5", "2048": "#09c", "4096": "#5b67ff"};var directionEnum = {left:{x:-1, y:0, key:"left"}, right:{x:1, y:0, key:"left"}, top:{x:0, y:-1, key:"top"}, down:{x:0, y:1, key:"top"}};var lock = true;var isChange = false;function move(direction) {    if (isOver()) {        alert("game over ~!");        return;    }    var newSquareSet = analysisActions(direction);    //收尾(保证最终一致性)    setTimeout(function () {        refresh(newSquareSet);        if (isChange) {            randGenerateSquare();        }        lock = true;        isChange = false;    }, 300);}function analysisActions(direction) {    var newSquareSet = generateNullMap();    if (direction == directionEnum.left) {//向左        console.log("向左");        for (var i = 0 ; i &lt; squareSet.length ; i ++) {            var temp = [];            for (var j = 0 ; j &lt; squareSet[i].length ; j ++) {                if (squareSet[i][j] != null) {                    temp.push(squareSet[i][j]);                }            }            temp = getNewLocation(temp);            for (var k = 0 ; k &lt; newSquareSet[i].length ; k ++) {                if (temp[k]) {                    newSquareSet[i][k] = temp[k];                }            }        }    } else if (direction == directionEnum.right) {//向右        console.log("向右");        for (var i = 0 ; i &lt; squareSet.length ; i ++) {            var temp = [];            for (var j = squareSet[i].length - 1 ; j &gt;= 0 ; j --) {                if (squareSet[i][j] != null) {                    temp.push(squareSet[i][j]);                }            }            temp = getNewLocation(temp);            for (var k = newSquareSet[i].length - 1 ; k &gt;= 0 ; k --) {                if (temp[newSquareSet[i].length - 1 - k]) {                    newSquareSet[i][k] = temp[newSquareSet[i].length - 1 - k];                }            }        }    } else if (direction == directionEnum.top) {//向前        console.log("向前");        for (var j = 0 ; j &lt; squareSet[0].length ; j ++) {            var temp = [];            for (var i = 0 ; i &lt; squareSet.length ; i ++) {                if (squareSet[i][j] != null) {                    temp.push(squareSet[i][j]);                }            }            temp = getNewLocation(temp);            for (var k = 0 ; k &lt; newSquareSet.length ; k ++) {                if (temp[k]) {                    newSquareSet[k][j] = temp[k];                }            }        }    } else {//向后        console.log("向后");        for (var j = 0 ; j &lt; squareSet[0].length ; j ++) {            var temp = [];            for (var i = squareSet.length - 1 ; i &gt;= 0 ; i --) {                if (squareSet[i][j] != null) {                    temp.push(squareSet[i][j]);                }            }            temp = getNewLocation(temp);            for (var k = newSquareSet.length - 1 ; k &gt;= 0 ; k --) {                if (temp[newSquareSet.length - 1 - k]) {                    newSquareSet[k][j] = temp[newSquareSet.length - 1 - k];                }            }        }    }    //动画    for (var i = 0 ; i &lt; newSquareSet.length ; i ++) {        for (var j = 0 ; j &lt; newSquareSet[i].length ; j ++) {            if (newSquareSet[i][j] == null) {                continue;            }            newSquareSet[i][j].style.transition = direction.key + " 0.3s";            newSquareSet[i][j].style.left = (j + 1) * spacing + j * squareWidth + "px";            newSquareSet[i][j].style.top = (i + 1) * spacing + i * squareWidth + "px";            if(newSquareSet[i][j].nextSquare) {                newSquareSet[i][j].nextSquare.style.transition = direction.key + " 0.3s";                newSquareSet[i][j].nextSquare.style.left = (j + 1) * spacing + j * squareWidth + "px";                newSquareSet[i][j].nextSquare.style.top = (i + 1) * spacing + i * squareWidth + "px";            }        }    }    return newSquareSet;}function getNewLocation(arr) {    if (arr.length == 0) {        return [];    }    var temp = [];    temp.push(arr[0]);    for (var i = 1 ; i &lt; arr.length ; i ++) {        if (arr[i].num == temp[temp.length - 1].num &amp;&amp; (!temp[temp.length - 1].nextSquare || temp[temp.length - 1].nextSquare == null)) {            temp[temp.length - 1].nextSquare = arr[i];        } else {            temp.push(arr[i]);        }    }    return temp;}function generateNullMap () {    var newValueMap = [];    for (var i = 0 ; i &lt; rows ; i ++) {        newValueMap[i] = [];        for (var j = 0 ; j &lt; cols ; j ++) {            newValueMap[i][j] = null;        }    }    return newValueMap;}function isOver() {    for (var i = 0 ; i &lt; squareSet.length ; i ++) {        for (var j = 0 ; j &lt; squareSet[i].length ; j ++) {            if (squareSet[i][j] == null) {                return false;            }            if (squareSet[i][j + 1] &amp;&amp; squareSet[i][j].num == squareSet[i][j + 1].num || squareSet[i + 1] &amp;&amp; squareSet[i + 1][j] &amp;&amp; squareSet[i][j].num == squareSet[i + 1][j].num){                return false;            }        }    }    return true;}function refresh(newSquareSet) {//纠正位图，保证最终一致性    squareSet = generateNullMap();    var newValueMap = generateNullMap();    for (var i = 0 ; i &lt; rows ; i ++) {        for (var j = 0 ; j &lt; cols ; j ++) {            //新的存在则添加            if (newSquareSet[i][j]) {                if (newSquareSet[i][j].nextSquare) {                    var temp = createSquare(newSquareSet[i][j].num * 2, newSquareSet[i][j].offsetLeft, newSquareSet[i][j].offsetTop, i, j);                    squareSet[i][j] = temp;                    my2048.append(temp);                    my2048.removeChild(newSquareSet[i][j].nextSquare);                    my2048.removeChild(newSquareSet[i][j]);                } else {                    var temp = createSquare(newSquareSet[i][j].num, newSquareSet[i][j].offsetLeft, newSquareSet[i][j].offsetTop, i, j);                    squareSet[i][j] = temp;                    my2048.append(temp);                    my2048.removeChild(newSquareSet[i][j]);                }                if (valueMap[i][j] != squareSet[i][j].num) {                    isChange = true;                }                newValueMap[i][j] = squareSet[i][j].num;            } else {                newValueMap[i][j] = 0;            }        }    }    valueMap = newValueMap;}function randSquareNum() {    return Math.random() &gt;= 0.5 ? 4 : 2;}function randGenerateSquare() {    for (;;) {        var randRow = Math.floor(Math.random() * rows);        var randCol = Math.floor(Math.random() * cols);        if (valueMap[randRow][randCol] == 0) {            var temp = createSquare(randSquareNum(), randCol * squareWidth + (randCol + 1) * spacing, randRow * squareWidth + (randRow + 1) * spacing, randRow, randCol);            valueMap[temp.row][temp.col] = temp.num;            squareSet[temp.row][temp.col] = temp;            my2048.appendChild(temp);            return true;        }    }}function createSquare(value, left, top, row, col) {    var temp = document.createElement("div");    temp.style.width = squareWidth + "px";    temp.style.height = squareWidth + "px";    temp.style.left = left + "px";    temp.style.top = top + "px";    temp.style.background = colorMapping[value];    temp.style.lineHeight = squareWidth + "px";    temp.style.textAlign = "center";    temp.style.fontSize = 0.4 * squareWidth + "px";    temp.num = value;    temp.row = row;    temp.col = col;    if (value &gt; 0) {        temp.innerHTML = "" + value;    }    return temp;}function initBoard() {    my2048 = document.getElementById("my2048");    my2048.style.width = cols * squareWidth + (cols + 1) * spacing + "px";    my2048.style.height = rows * squareWidth + (rows + 1) * spacing + "px";}function init() {    //初始化棋盘    initBoard();    for (var i = 0 ; i &lt; rows ; i ++){        boardSet[i] = [];        valueMap[i] = [];        squareSet[i] = [];        for (var j = 0 ; j &lt; cols ; j ++){            valueMap[i][j] = 0;            squareSet[i][j] = null;            boardSet[i][j] = createSquare(0, j * squareWidth + (j + 1) * spacing, i * squareWidth + (i + 1) * spacing, i, j);            my2048.appendChild(boardSet[i][j]);        }    }    //初始化方块    randGenerateSquare();    randGenerateSquare();    //添加事件    document.addEventListener("keydown", function(e) {        if (!lock) return;        lock = false;        switch (e.key) {            case "ArrowUp": move(directionEnum.top);break;            case "ArrowDown": move(directionEnum.down);break;            case "ArrowLeft": move(directionEnum.left);break;            case "ArrowRight": move(directionEnum.right);break;            default : {                lock = true;            }        }    });}window.onload = function () {    init();}</code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用github存储图片</title>
      <link href="2021/04/05/%E4%BD%BF%E7%94%A8github%E5%AD%98%E5%82%A8%E5%9B%BE%E7%89%87/"/>
      <url>2021/04/05/%E4%BD%BF%E7%94%A8github%E5%AD%98%E5%82%A8%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<p>Welcome to [Hexo]</p><h4 id="1-创建仓库"><a href="#1-创建仓库" class="headerlink" title="1.创建仓库"></a>1.创建仓库</h4><p>首先要在Github上创建一个图片管理仓库，方法很简单，随便命名，如下图：<br><img src="https://raw.githubusercontent.com/printfCYQ/cyqblog-img/master/new-repository.png?token=AKUA4KLROOR4JNPFMPYRXMC6SPKNE" width="100%"></p><h4 id="2-克隆仓库"><a href="#2-克隆仓库" class="headerlink" title="2.克隆仓库"></a>2.克隆仓库</h4><p>到Github的客户端将刚刚创建的仓库clone到你指定的位置，如下图：<br><img src="https://raw.githubusercontent.com/printfCYQ/cyqblog-img/master/clone-repository.png?token=AKUA4KNBZWL3CIG5CFO7Q7S6SPKPI" width="100%"></p><h4 id="3-上传图片"><a href="#3-上传图片" class="headerlink" title="3.上传图片"></a>3.上传图片</h4><p>点击<code>open this repository</code>，将要上传的图片放进改文件夹，返回github客户端填写描述，点击<code>Commit to master</code>即可自动进入下一页，此时还没有将图片上传到仓库，需要在此点击一下右上角<code>Publish</code>将图片上传到仓库，如下图：<br><img src="https://raw.githubusercontent.com/printfCYQ/cyqblog-img/master/open-file.png?token=AKUA4KMMPRLNDI44TIOK2AC6SPKR4" width="100%"><br><img src="https://raw.githubusercontent.com/printfCYQ/cyqblog-img/master/update-img.png?token=AKUA4KMVRR6HVL5AU5ETQOC6SPKUS" width="100%"></p><h4 id="4-获取链接"><a href="#4-获取链接" class="headerlink" title="4.获取链接"></a>4.获取链接</h4><p>待上传成功后打开自己的Github主页找到图片仓库进入，选择其中一张图片点击，进入图片详情后点击<code>Download</code>进入图片的下载链接页。</p><img src="https://raw.githubusercontent.com/printfCYQ/cyqblog-img/master/download-img.png?token=AKUA4KKAKUYQVD2LG4WAPQK6SPKY2" width="100%"><p>至此，成功获取到链接。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用七牛云存储文件</title>
      <link href="2021/04/04/%E4%BD%BF%E7%94%A8%E4%B8%83%E7%89%9B%E4%BA%91%E5%AD%98%E5%82%A8%E6%96%87%E4%BB%B6/"/>
      <url>2021/04/04/%E4%BD%BF%E7%94%A8%E4%B8%83%E7%89%9B%E4%BA%91%E5%AD%98%E5%82%A8%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>Welcome to [Hexo]</p><p><b>需求：</b>在本地写作时，把图片直接传到图片服务器，复制图片URL到本地的markdown文档——发布时只需要将文本内容传到博客即可。访问博客时，博客服务器也只需要加载文本内容，图片内容由图片服务器负责加载。</p><p>之前使用Github进行存储，使用过程发现Github经常不能访问，所以使用七牛云进行存储。</p><h4 id="1-注册七牛云账号"><a href="#1-注册七牛云账号" class="headerlink" title="1.注册七牛云账号"></a>1.注册七牛云账号</h4><hr><p><a target="_blank" href="https://www.qiniu.com/">七牛云</a><br>实名认证即可获得<code>10GB</code>存储空间，对于博客已经很够用。</p><h4 id="2-创建空间"><a href="#2-创建空间" class="headerlink" title="2. 创建空间"></a>2. 创建空间</h4><hr><p>登录，到主页后点击对象存储-空间管理，新建一个空间。</p><p>填写好必填内容，即可创建成功。<br><img src="http://q8s2pu3ll.bkt.clouddn.com/qiniu-1.png?e=1587474390&amp;token=voGbpLBJSZOJRRtvMG9WA4cNlqdXthz-bNgDcMxe:Z9rtH9mGvIPbtGmIKeoRBxUyjhM=&amp;attname=" width="100%"></p><h4 id="3-上传图片"><a href="#3-上传图片" class="headerlink" title="3.上传图片"></a>3.上传图片</h4><hr><p>空间管理-&gt;文件管理-&gt;上传文件<br>选择文件后上传-&gt;上传成功的会在文件列表出现。</p><img src="http://q8s2pu3ll.bkt.clouddn.com/qiniu-2.png?e=1587474680&amp;token=voGbpLBJSZOJRRtvMG9WA4cNlqdXthz-bNgDcMxe:MuQc24hMqSZhuE2VjyyiZm9V3J4=&amp;attname=" width="100%"><h4 id="4-获取URL"><a href="#4-获取URL" class="headerlink" title="4.获取URL"></a>4.获取URL</h4><hr><p>文件列表-&gt;操作-&gt;更多-&gt;下载<br>即可复制URL<br><img src="http://q8s2pu3ll.bkt.clouddn.com/qiniu-3.png?e=1587474680&amp;token=voGbpLBJSZOJRRtvMG9WA4cNlqdXthz-bNgDcMxe:9m7IFWIg3fI_6px13qut9i4EnZQ=&amp;attname=" width="100%"></p><center>-- END --</center>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文字时钟</title>
      <link href="2021/04/04/JS-%E6%8A%96%E9%9F%B3%E5%BE%88%E7%81%AB%E7%9A%84%E6%96%87%E5%AD%97%E6%97%B6%E9%92%9F/"/>
      <url>2021/04/04/JS-%E6%8A%96%E9%9F%B3%E5%BE%88%E7%81%AB%E7%9A%84%E6%96%87%E5%AD%97%E6%97%B6%E9%92%9F/</url>
      
        <content type="html"><![CDATA[<p>Welcome to [Hexo]</p><h1 id="JS-文字时钟"><a href="#JS-文字时钟" class="headerlink" title="JS-文字时钟"></a>JS-文字时钟</h1><h2 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h2><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;    &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;link rel="stylesheet" href="index.css"&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id="clock"&gt;&lt;/div&gt;    &lt;script src="index.js"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="index-css"><a href="#index-css" class="headerlink" title="index.css"></a>index.css</h2><pre><code>*{    margin:0;    padding:0;}html,body{    width:100%;    height:100%;    background-color: #000;    overflow: hidden;}#clock {    position: relative;    width: 100%;    height: 100%;    background: black;}.label{    display:inline-block;    color:#4d4d4d;    text-align: center;    padding:0 5px;    font-size:19px;    transition:left 1s,top 1s;    transform-origin: 0% 0%;}</code></pre><h2 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h2><pre><code>var monthText = ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"];var dayText = ["一号", "二号", "三号", "四号", "五号", "六号", "七号", "八号", "九号", "十号", "十一号", "十二号", "十三号", "十四号", "十五号", "十六号", "十七号", "十八号", "十九号", "二十号", "二十一号", "二十二号", "二十三号", "二十四号", "二十五号", "二十六号", "二十七号", "二十八号", "二十九号", "三十号", "三十一号"];var weekText = ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"];var hourText = ["零点", "一点", "两点", "三点", "四点", "五点", "六点", "七点", "八点", "九点", "十点", "十一点", "十二点", "十三点", "十四点", "十五点", "十六点", "十七点", "十八点", "十九点", "二十点", "二十一点", "二十二点", "二十三点"];var minuteText = ["一分", "二分", "三分", "四分", "五分", "六分", "七分", "八分", "九分", "十分",    "十一分", "十二分", "十三分", "十四分", "十五分", "十六分", "十七分", "十八分", "十九分", "二十分",    "二十一分", "二十二分", "二十三分", "二十四分", "二十五分", "二十六分", "二十七分", "二十八分", "二十九分", "三十分",    "三十一分", "三十二分", "三十三分", "三十四分", "三十五分", "三十六分", "三十七分", "三十八分", "三十九分", "四十分",    "四十一分", "四十二分", "四十三分", "四十四分", "四十五分", "四十六分", "四十七分", "四十八分", "四十九分", "五十分",    "五十一分", "五十二分", "五十三分", "五十四分", "五十五分", "五十六分", "五十七分", "五十八分", "五十九分", "六十分"];var secondsText = ["一秒", "二秒", "三秒", "四秒", "五秒", "六秒", "七秒", "八秒", "九秒", "十秒",    "十一秒", "十二秒", "十三秒", "十四秒", "十五秒", "十六秒", "十七秒", "十八秒", "十九秒", "二十秒",    "二十一秒", "二十二秒", "二十三秒", "二十四秒", "二十五秒", "二十六秒", "二十七秒", "二十八秒", "二十九秒", "三十秒",    "三十一秒", "三十二秒", "三十三秒", "三十四秒", "三十五秒", "三十六秒", "三十七秒", "三十八秒", "三十九秒", "四十秒",    "四十一秒", "四十二秒", "四十三秒", "四十四秒", "四十五秒", "四十六秒", "四十七秒", "四十八秒", "四十九秒", "五十秒",    "五十一秒", "五十二秒", "五十三秒", "五十四秒", "五十五秒", "五十六秒", "五十七秒", "五十八秒", "五十九秒", "六十秒"];var clock;// 存放dom元素的数组   var monthList = [];var dayList = [];var weekList = [];var hourList = [];var minuteList = [];var secondsList = [];// 当前展示是否为圆形var isCircle = false;//二维数组 存放文字内容及页面显示标签 var textSet = [    [monthText, monthList],    [dayText, dayList],    [weekText, weekList],    [hourText, hourList],    [minuteText, minuteList],    [secondsText, secondsList]];window.onload = function () {    init();    // 每隔100ms获得 当前时间 更新页面时间显示    setInterval(function () {        runTime();    }, 100);    // 在变成圆形之前先进性修改定位    changePosition();    // 延迟2000ms变成圆形    setTimeout(function () {        changeCircle();    }, 2000);}// 初始化函数function init() {    clock = document.getElementById('clock');    // 生成标签 存放文字展示    for (var i = 0; i &lt; textSet.length; i++) {        for (var j = 0; j &lt; textSet[i][0].length; j++) {            var temp = createLabel(textSet[i][0][j]);            clock.appendChild(temp);            // 将生成的标签存放在数组list中            textSet[i][1].push(temp);        }    }}// 创建标签并将文字填充标签内 接收参数为文字内容  function createLabel(text) {    var div = document.createElement('div');    div.classList.add('label');    div.innerText = text;    return div;}function runTime() {    // 利用时间对象获得 当前 时间    var now = new Date();    // 获得月 日期 小时 分钟 秒钟    var month = now.getMonth();    var day = now.getDate();    var week = now.getDay();    var hour = now.getHours();    var minute = now.getMinutes();    var seconds = now.getSeconds();    // 初始化时间颜色 同时将走过时间设置为灰色    initStyle();    // 设置当前时间为白色    // 将当前时间月份存放在数组中    var nowValue = [month, day - 1, week, hour, minute, seconds];    for (var i = 0; i &lt; nowValue.length; i++) {        var num = nowValue[i];        textSet[i][1][num].style.color = '#fff';    }    // 变成圆形    if (isCircle) {        // 确定圆心        var widthMid = document.body.clientWidth / 2;        var heightMid = document.body.clientHeight / 2;        // 将每一个dom元素确定到圆的位置        for (var i = 0; i &lt; textSet.length; i++) {            for (var j = 0; j &lt; textSet[i][0].length; j++) {                // 加算出每一个元素的位置  x y 坐标                // 每一个圆的半径与时分秒的位置有关                var r = (i + 1) * 35 + 50 * i;                // 计算每一个平均的角度  再将每一个单位对齐 然后转化成弧度                var deg = 360 / textSet[i][1].length * (j - nowValue[i]) ;                // 计算出每一个dom元素的坐标                var x = r * Math.sin(deg * Math.PI / 180) + widthMid;                var y = heightMid - r*Math.cos(deg * Math.PI / 180);                // 设置样式                var temp =  textSet[i][1][j];                temp.style.transform = 'rotate(' + (-90 + deg ) + 'deg)';                temp.style.left = x + 'px';                temp.style.top = y + 'px';            }        }    }}function initStyle() {    // 将所有标签置为灰色     // 利用取出dom元素    var label = document.getElementsByClassName('label');    for (var i = 0; i &lt; label.length; i++) {        label[i].style.color = '#4d4d4d';    }    // 利用二维数组存放dom元素的数组    // for (var i = 0 ; i &lt; textSet.length ; i ++) {    //     for (var j = 0 ; j &lt; textSet[i][0].length ; j ++) {    //         textSet[i][1][j].style.color = "#4d4d4d";    //     }    // }}// 修改positionfunction changePosition() {    for (let i = 0; i &lt; textSet.length; i++) {        for (let j = 0; j &lt; textSet[i][1].length; j++) {            // 先获得原来的位置  再修改position 设置left top             let tempX = textSet[i][1][j].offsetLeft + "px";            let tempY = textSet[i][1][j].offsetTop + "px";            // console.log(textSet[i][1][j]);            // 利用let 防止闭包            setTimeout(function () {                textSet[i][1][j].style.position = "absolute";                textSet[i][1][j].style.left = tempX;                textSet[i][1][j].style.top = tempY;            }, 50);        }    }}function changeCircle() {    isCircle = true;    clock.style.transform = "rotate(90deg)";}</code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS封装方法总结</title>
      <link href="2021/04/03/js%E5%B0%81%E8%A3%85%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>2021/04/03/js%E5%B0%81%E8%A3%85%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>Welcome to [Hexo]</p><h1 id="JS封装方法总结"><a href="#JS封装方法总结" class="headerlink" title="JS封装方法总结"></a>JS封装方法总结</h1><h2 id="求滚动条滚动距离"><a href="#求滚动条滚动距离" class="headerlink" title="求滚动条滚动距离"></a>求滚动条滚动距离</h2><pre><code>function getScrollOffset() {    if (window.pageXOffset) {        return {            x: window.pageXOffset,            y: window.pageYOffset        }    } else {        return {            x: document.body.scrollLeft + document.documentElement.scrollLeft,            y: document.body.scrollTop + document.documentElement.scrollTop        }    }}</code></pre><h2 id="返回浏览器视口尺寸"><a href="#返回浏览器视口尺寸" class="headerlink" title="返回浏览器视口尺寸"></a>返回浏览器视口尺寸</h2><pre><code>function getViewportOffset() {    if (window.innerWidth) {        return {            w: window.innerWidth,            h: window.innerHeight        }    } else {        if (document.compatMode === "BackCompat") {            return {                w: document.body.clientWidth,                h: document.body.clientHeight            }        } else {            return {                w: document.documentElement.clientWidth,                h: document.documentElement.clientHeight            }        }    }}</code></pre><h2 id="获取元素样式-兼容"><a href="#获取元素样式-兼容" class="headerlink" title="获取元素样式(兼容)"></a>获取元素样式(兼容)</h2><pre><code>function getStyle(elem, prop) {    if (window.getComputedStyle) {        return window.getComputedStyle(elem, null)[prop];    } else {        return elem.currentStyle[prop];    }}</code></pre><h2 id="给一个dom对象添加该事件类型的函数（兼容）"><a href="#给一个dom对象添加该事件类型的函数（兼容）" class="headerlink" title="给一个dom对象添加该事件类型的函数（兼容）"></a>给一个dom对象添加该事件类型的函数（兼容）</h2><pre><code>function addEvent(elem, type, handle) {    if (elem.addEventListener) {        elem.addEventListener(type, handle, false);    } else if (elem.attachEvent) {        elem.attachEvent('on' + type, function () {            handle.call(elem);        })    } else {        elem['on' + type] = handle;    }}</code></pre><h2 id="删除事件"><a href="#删除事件" class="headerlink" title="删除事件"></a>删除事件</h2><pre><code>function removeEvent(elem, type, handle) {    if (typeof elem.removeEventListener !== 'undefined') {        elem.removeEventListener(type, handle, false);    } else if (typeof elem.detachEvent !== 'undefined') {        elem.detachEvent('on' + type);    }}</code></pre><h2 id="取消冒泡（兼容）"><a href="#取消冒泡（兼容）" class="headerlink" title="取消冒泡（兼容）"></a>取消冒泡（兼容）</h2><pre><code>function stopBubble(event) {    if (event.stopPropagation) {        event.stopPropagation();    } else {        event.cancelBubble = true;    }}</code></pre><h2 id="阻止默认事件函数"><a href="#阻止默认事件函数" class="headerlink" title="阻止默认事件函数"></a>阻止默认事件函数</h2><pre><code>function cancelHandler(event) {    if (event.preventDefault) {        event.preventDefault();    } else {        event.returnValue = false;    }}</code></pre><h2 id="拖拽事件"><a href="#拖拽事件" class="headerlink" title="拖拽事件"></a>拖拽事件</h2><pre><code>function drag(elem) {    var disX,        disY;    addEvent(elem, 'mousedown', function (e) {        var event = e || window.event;        disX = event.clientX - parseInt(getStyle(elem, 'left'));        disY = event.clientY - parseInt(getStyle(elem, 'top'));        addEvent(document, 'mousemove', mouseMove);        addEvent(document, 'mouseup', mouseUp);        stopBubble(event);        cancelHandler(event);    });    function mouseMove(e) {        var event = e || window.event;        elem.style.left = event.clientX - disX + "px";        elem.style.top = event.clientY - disY + "px";    }    function mouseUp(e) {        var event = e || window.event;        removeEvent(document, 'mousemove', mouseMove);        removeEvent(document, 'mouseup', mouseUp);    }}</code></pre><h2 id="异步加载（兼容）"><a href="#异步加载（兼容）" class="headerlink" title="异步加载（兼容）"></a>异步加载（兼容）</h2><pre><code>function loadScript(url, callback) {    var script = document.createElement('script');    script.type = "text/javascript";    if (script.readyState) {        script.onreadstatechange = function () {//IE            if (script.readyState == "complete" || script.readyStatereadyState == "loaded") {                callback();            }        }    } else {        script.onload = function () {            callback();        }    }    script.src = url;    document.head.appendChild(script);}loadScript('/*路径*/', function () {    test();})</code></pre><h2 id="获取指定标签对象"><a href="#获取指定标签对象" class="headerlink" title="获取指定标签对象"></a>获取指定标签对象</h2><pre><code>/** * 获取指定标签对象 * @param id 标签的id属性值 * @returns {Element}根据id属性值返回指定标签对象 */function my$(id) {    return document.getElementById(id);}</code></pre><h2 id="设置任意的标签中间的任意文本内容"><a href="#设置任意的标签中间的任意文本内容" class="headerlink" title="设置任意的标签中间的任意文本内容"></a>设置任意的标签中间的任意文本内容</h2><pre><code>function setInnerText(element, text) {    //判断浏览器是否支持这个属性    if (typeof element.textContent == "undefined") {//不支持        element.innerText = text;    } else {//支持这个属性        element.textContent = text;    }}my$("btn").onclick = function () {    console.log(getInnerText(my$("dv")));};</code></pre><h2 id="获取任意标签中间的文本内容"><a href="#获取任意标签中间的文本内容" class="headerlink" title="获取任意标签中间的文本内容"></a>获取任意标签中间的文本内容</h2><pre><code>function getInnerText(element) {    if (typeof element.textContent == "undefined") {        return element.innerText;    } else {        return element.textContent;    }}my$("btn").onclick = function () {    setInnerText(my$("dv"), "哈哈,我又变帅了");};</code></pre><h2 id="获取任意一个父级元素的第一个子级元素"><a href="#获取任意一个父级元素的第一个子级元素" class="headerlink" title="获取任意一个父级元素的第一个子级元素"></a>获取任意一个父级元素的第一个子级元素</h2><pre><code>function getFirstElementChild(element) {    if (element.firstElementChild) {//true---&gt;支持        return element.firstElementChild;    } else {        var node = element.firstChild;//第一个节点        while (node &amp;&amp; node.nodeType != 1) {            node = node.nextSibling;        }        return node;    }}console.log(getFirstElementChild(my$("uu")).innerText);</code></pre><h2 id="获取任意一个父级元素的最后一个子级元素"><a href="#获取任意一个父级元素的最后一个子级元素" class="headerlink" title="获取任意一个父级元素的最后一个子级元素"></a>获取任意一个父级元素的最后一个子级元素</h2><pre><code>function getLastElementChild(element) {    if (element.lastElementChild) {//true---&gt;支持        return element.lastElementChild;    } else {        var node = element.lastChild;//第一个节点        while (node &amp;&amp; node.nodeType != 1) {            node = node.previousSibling;        }        return node;    }}console.log(getLastElementChild(my$("uu")).innerText);</code></pre><h2 id="获取某个元素的前一个兄弟元素"><a href="#获取某个元素的前一个兄弟元素" class="headerlink" title="获取某个元素的前一个兄弟元素"></a>获取某个元素的前一个兄弟元素</h2><pre><code>/** * 获取某个元素的前一个兄弟元素 * @param element 某个元素 * @returns {*} 前一个兄弟元素 */function getPreviousElement(element) {    if (element.previousElementSibling) {        return element.previousElementSibling    } else {        var node = element.previousSibling;        while (node &amp;&amp; node.nodeType != 1) {            node = node.previousSibling;        }        return node;    }}</code></pre><h2 id="获取某个元素的后一个兄弟元素"><a href="#获取某个元素的后一个兄弟元素" class="headerlink" title="获取某个元素的后一个兄弟元素"></a>获取某个元素的后一个兄弟元素</h2><pre><code>/** * 获取某个元素的后一个兄弟元素 * @param element 某个元素 * @returns {*} 后一个兄弟元素 */function getNextElement(element) {    if (element.nextElementSibling) {        return element.nextElementSibling    } else {        var node = element.nextSibling;        while (node &amp;&amp; node.nodeType != 1) {            node = node.nextSibling;        }        return node;    }}</code></pre><h2 id="获取某个元素的所有兄弟元素"><a href="#获取某个元素的所有兄弟元素" class="headerlink" title="获取某个元素的所有兄弟元素"></a>获取某个元素的所有兄弟元素</h2><pre><code>/** * 获取某个元素的所有兄弟元素 * @param element 某个元素 * @returns {Array} 兄弟元素 */function getSiblings(element) {    if (!element) return;    var elements = [];    var ele = element.previousSibling;    while (ele) {        if (ele.nodeType === 1) {            elements.push(ele);        }        ele = ele.previousSibling;    }    ele = element.nextSibling;    while (ele) {        if (ele.nodeType === 1) {            elements.push(ele);        }        ele = ele.nextSibling;    }    return elements;}</code></pre><h2 id="为任意元素-绑定任意的事件-任意的元素-事件的类型-事件处理函数"><a href="#为任意元素-绑定任意的事件-任意的元素-事件的类型-事件处理函数" class="headerlink" title="为任意元素.绑定任意的事件, 任意的元素,事件的类型,事件处理函数"></a>为任意元素.绑定任意的事件, 任意的元素,事件的类型,事件处理函数</h2><pre><code>function addEventListener(element, type, fn) {    //判断浏览器是否支持这个方法    if (element.addEventListener) {        element.addEventListener(type, fn, false);    } else if (element.attachEvent) {        element.attachEvent("on" + type, fn);    } else {        element["on" + type] = fn;    }}</code></pre><h2 id="为任意的一个元素-解绑对应的事件"><a href="#为任意的一个元素-解绑对应的事件" class="headerlink" title="为任意的一个元素,解绑对应的事件"></a>为任意的一个元素,解绑对应的事件</h2><pre><code>function removeEventListener(element, type, fnName) {    if (element.removeEventListener) {        element.removeEventListener(type, fnName, false);    } else if (element.detachEvent) {        element.detachEvent("on" + type, fnName);    } else {        element["on" + type] = null;    }}</code></pre><h2 id="格式化日期"><a href="#格式化日期" class="headerlink" title="格式化日期"></a>格式化日期</h2><pre><code>/** * 格式化日期 * @param dt 日期对象 * @returns {string} 返回值是格式化的字符串日期 */function getDates(dt) {    var str = "";//存储时间的字符串    //获取年    var year = dt.getFullYear();    //获取月    var month = dt.getMonth() + 1;    //获取日    var day = dt.getDate();    //获取小时    var hour = dt.getHours();    //获取分钟    var min = dt.getMinutes();    //获取秒    var sec = dt.getSeconds();    month = month &lt; 10 ? "0" + month : month;    day = day &lt; 10 ? "0" + day : day;    hour = hour &lt; 10 ? "0" + hour : hour;    min = min &lt; 10 ? "0" + min : min;    sec = sec &lt; 10 ? "0" + sec : sec;    str = year + "年" + month + "月" + day + "日 " + hour + ":" + min + ":" + sec;    return str;}</code></pre><h2 id="返回当前浏览器是什么类型的浏览器"><a href="#返回当前浏览器是什么类型的浏览器" class="headerlink" title="返回当前浏览器是什么类型的浏览器"></a>返回当前浏览器是什么类型的浏览器</h2><pre><code>function userBrowser() {    var browserName = navigator.userAgent.toLowerCase();    if (/msie/i.test(browserName) &amp;&amp; !/opera/.test(browserName)) {        console.log("IE");    } else if (/firefox/i.test(browserName)) {        console.log("Firefox");    } else if (/chrome/i.test(browserName) &amp;&amp; /webkit/i.test(browserName) &amp;&amp; /mozilla/i.test(browserName)) {        console.log("Chrome");    } else if (/opera/i.test(browserName)) {        console.log("Opera");    } else if (/webkit/i.test(browserName) &amp;&amp; !(/chrome/i.test(browserName) &amp;&amp; /webkit/i.test(browserName) &amp;&amp; /mozilla/i.test(browserName))) {        console.log("Safari");    } else {        console.log("不知道什么鬼!");    }}</code></pre><h2 id="动画函数—任意一个元素移动到指定的目标位置"><a href="#动画函数—任意一个元素移动到指定的目标位置" class="headerlink" title="动画函数—任意一个元素移动到指定的目标位置"></a>动画函数—任意一个元素移动到指定的目标位置</h2><pre><code>function animate(element, target) {    //先清理定时器    clearInterval(element.timeId);    //一会要清理定时器(只产生一个定时器)    element.timeId = setInterval(function () {        //获取div的当前的位置        var current = element.offsetLeft;//数字类型,没有px        //div每次移动多少像素---步数        var step = 10;        step = current &lt; target ? step : -step;        //每次移动后的距离        current += step;        //判断当前移动后的位置是否到达目标位置        if (Math.abs(target - current) &gt; Math.abs(step)) {            element.style.left = current + "px";        } else {            //清理定时器            clearInterval(element.timeId);            element.style.left = target + "px";        }    }, 20);}my$("btn2").onclick = function () {    animate(my$("dv"), 800);};</code></pre><h2 id="变速动画-任意一个元素移动到指定的目标位置"><a href="#变速动画-任意一个元素移动到指定的目标位置" class="headerlink" title="变速动画-任意一个元素移动到指定的目标位置"></a>变速动画-任意一个元素移动到指定的目标位置</h2><pre><code>function animateChange(element, target) {    //清理定时器    clearInterval(element.timeId);    element.timeId = setInterval(function () {      //获取元素的当前位置      var current = element.offsetLeft;      //移动的步数      var step = (target-current)/10;      step = step&gt;0?Math.ceil(step):Math.floor(step);      current += step;      element.style.left = current + "px";      if(current==target) {        //清理定时器        clearInterval(element.timeId);      }      //测试代码:      console.log("目标位置:"+target+",当前位置:"+current+",每次移动步数:"+step);    }, 20);  }  my$("btn2").onclick = function () {    animateChange(my$("dv"), 800);};</code></pre><h2 id="foreach的兼容代码"><a href="#foreach的兼容代码" class="headerlink" title="foreach的兼容代码"></a>foreach的兼容代码</h2><pre><code>if (!Array.prototype.forEach) {    Array.prototype.forEach = function (callback, thisArg) {        var T, k;        if (this == null) {            throw new TypeError(' this is null or not defined');        }        // 1. Let O be the result of calling toObject() passing the        // |this| value as the argument.        var O = Object(this);        // 2. Let lenValue be the result of calling the Get() internal        // method of O with the argument "length".        // 3. Let len be toUint32(lenValue).        var len = O.length &gt;&gt;&gt; 0;        // 4. If isCallable(callback) is false, throw a TypeError exception.         // See: http://es5.github.com/#x9.11        if (typeof callback !== "function") {            throw new TypeError(callback + ' is not a function');        }        // 5. If thisArg was supplied, let T be thisArg; else let        // T be undefined.        if (arguments.length &gt; 1) {            T = thisArg;        }        // 6. Let k be 0        k = 0;        // 7. Repeat, while k &lt; len        while (k &lt; len) {            var kValue;            // a. Let Pk be ToString(k).            //    This is implicit for LHS operands of the in operator            // b. Let kPresent be the result of calling the HasProperty            //    internal method of O with argument Pk.            //    This step can be combined with c            // c. If kPresent is true, then            if (k in O) {                // i. Let kValue be the result of calling the Get internal                // method of O with argument Pk.                kValue = O[k];                // ii. Call the Call internal method of callback with T as                // the this value and argument list containing kValue, k, and O.                callback.call(T, kValue, k, O);            }            // d. Increase k by 1.            k++;        }        // 8. return undefined    };}</code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>端口占用</title>
      <link href="2021/04/03/%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/"/>
      <url>2021/04/03/%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>Welcome to [Hexo]</p><h1 id="端口占用"><a href="#端口占用" class="headerlink" title="端口占用"></a>端口占用</h1><p>在java或者其他服务器语言开发时，经常端口占用，显示下面的错误：</p><blockquote><p>The Tomcat connector configured to listen on port 8080 failed to start. The port may already be in &gt;use or the connector may be misconfigured</p></blockquote><p>springboot 8080端口被占用报错：The Tomcat connector configured to listen on port 8080 failed to start. The port may already be in use or the connector may be misconfigured</p><p>cmd打开命令提示符，输入如下命令</p><pre><code>netstat -aon|findstr 8080</code></pre><p>查询出<br><img src="http://q8s2pu3ll.bkt.clouddn.com/duankouzhanyong-1.png?e=1586871413&amp;token=voGbpLBJSZOJRRtvMG9WA4cNlqdXthz-bNgDcMxe:IQOpbbwiWy-90g0muWlKqrNI2b8=&amp;attname=" width="100%"></p><p>再输入</p><pre><code>taskkill /f /t /im 9260</code></pre><img src="http://q8s2pu3ll.bkt.clouddn.com/duankouzhanyong-2.png?e=1586871413&amp;token=voGbpLBJSZOJRRtvMG9WA4cNlqdXthz-bNgDcMxe:JKKI_aDHkrHWKLgHRPremZ9zokc=&amp;attname=" width="100%"><p>成功解决</p>]]></content>
      
      
      <categories>
          
          <category> Win </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Win </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 简介</title>
      <link href="2021/04/02/markdown%E8%AF%AD%E6%B3%95/"/>
      <url>2021/04/02/markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>Welcome to [Hexo]</p><h1 id="P01-Markdown-简介"><a href="#P01-Markdown-简介" class="headerlink" title="P01 Markdown 简介"></a>P01 Markdown 简介</h1><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p><p>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。</p><p>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</p><p>Markdown 编写的文档后缀为 <kbd>.md</kbd>或<kbd>.markdown</kbd>。</p><h1 id="P02-Markdown-标题"><a href="#P02-Markdown-标题" class="headerlink" title="P02 Markdown 标题"></a>P02 Markdown 标题</h1><p>Markdown 标题有两种格式。</p><blockquote><p>1.使用 = 和 - 标记一级和二级标题</p></blockquote><pre><code>我展示的是一级标题=================我展示的是二级标题-----------------</code></pre><h1 id="我展示的是一级标题"><a href="#我展示的是一级标题" class="headerlink" title="我展示的是一级标题"></a>我展示的是一级标题</h1><h2 id="我展示的是二级标题"><a href="#我展示的是二级标题" class="headerlink" title="我展示的是二级标题"></a>我展示的是二级标题</h2><blockquote><p>2.使用 # 号标记</p></blockquote><p>使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。</p>```## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题```## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题<h1 id="P03-Markdown-段落"><a href="#P03-Markdown-段落" class="headerlink" title="P03 Markdown 段落"></a>P03 Markdown 段落</h1><p>Markdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车。</p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>Markdown 可以使用以下几种字体</p><pre><code>*斜体文本*_斜体文本_**粗体文本**__粗体文本__***粗斜体文本***___粗斜体文本___</code></pre><p>显示效果如下所示：</p><p><em>斜体文本</em><br><em>斜体文本</em><br><strong>粗体文本</strong><br><strong>粗体文本</strong><br><strong><em>粗斜体文本</em></strong><br><strong><em>粗斜体文本</em></strong></p><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><pre><code>**** * ******- - -----------</code></pre><hr><hr><hr><hr><hr><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ 即可，实例如下：</p><pre><code>~~BAIDU.COM~~</code></pre><p><del>BAIDU.COM</del></p><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><p>下划线可以通过 HTML 的 <code>&lt;u&gt;</code> 标签来实现：</p><pre><code>&lt;u&gt;带下划线文本&lt;/u&gt;</code></pre><p><u>带下划线文本</u></p><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>脚注是对文本的补充说明。</p><pre><code>创建脚注格式类似这样 [^RUNOOB]。[^RUNOOB]: 菜鸟教程 -- 学的不仅是技术，更是梦想！！！</code></pre><p>创建脚注格式类似这样 [^runoob]。</p><p>[^runoob]: 菜鸟教程 – 学的不仅是技术，更是梦想！！！</p><h1 id="P04-Markdown-列表"><a href="#P04-Markdown-列表" class="headerlink" title="P04 Markdown 列表"></a>P04 Markdown 列表</h1><p>Markdown 支持有序列表和无序列表。</p><p>无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记：</p><pre><code>* 第一项* 第二项* 第三项+ 第一项+ 第二项+ 第三项- 第一项- 第二项- 第三项</code></pre><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><p>有序列表使用数字并加上 . 号来表示，如</p><pre><code>1. 第一项2. 第二项3. 第三项</code></pre><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><h2 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h2><pre><code>1. 第一项：    - 第一项嵌套的第一个元素    - 第一项嵌套的第二个元素2. 第二项：    - 第二项嵌套的第一个元素    - 第二项嵌套的第二个元素</code></pre><ol><li>第一项：<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li><li>第二项：<ul><li>第二项嵌套的第一个元素</li><li>第二项嵌套的第二个元素</li></ul></li></ol><h1 id="P05-Markdown-区块"><a href="#P05-Markdown-区块" class="headerlink" title="P05 Markdown 区块"></a>P05 Markdown 区块</h1><p>Markdown 区块引用是在段落开头使用 <code>&gt;</code> 符号 ，然后后面紧跟一个空格符号：</p><pre><code>&gt; 区块引用&gt; 菜鸟教程&gt; 学的不仅是技术更是梦想</code></pre><blockquote><p>区块引用<br>菜鸟教程<br>学的不仅是技术更是梦想</p></blockquote><p>另外区块是可以嵌套的，一个 <code>&gt;</code> 符号是最外层，两个 <code>&gt;</code> 符号是第一层嵌套，以此类推：</p><pre><code>&gt; 最外层&gt; &gt; 第一层嵌套&gt; &gt; &gt; 第二层嵌套</code></pre><blockquote><p>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第二层嵌套</p></blockquote></blockquote></blockquote><h2 id="区块中使用列表"><a href="#区块中使用列表" class="headerlink" title="区块中使用列表"></a>区块中使用列表</h2><p>区块中使用列表实例如下：</p><pre><code>&gt; 区块中使用列表&gt; 1. 第一项&gt; 2. 第二项&gt; + 第一项&gt; + 第二项&gt; + 第三项</code></pre><blockquote><p>区块中使用列表</p><ol><li>第一项</li><li>第二项</li></ol><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><h2 id="列表中使用区块"><a href="#列表中使用区块" class="headerlink" title="列表中使用区块"></a>列表中使用区块</h2><p>如果要在列表项目内放进区块，那么就需要在 <code>&gt;</code> 前添加四个空格的缩进。</p><p>区块中使用列表实例如下：</p><pre><code>* 第一项    &gt; 菜鸟教程    &gt; 学的不仅是技术更是梦想* 第二项</code></pre><ul><li>第一项<blockquote><p>菜鸟教程<br>学的不仅是技术更是梦想</p></blockquote></li><li>第二项</li></ul><h1 id="P06-Markdown-代码"><a href="#P06-Markdown-代码" class="headerlink" title="P06 Markdown 代码"></a>P06 Markdown 代码</h1><p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来<kbd>`</kbd>，例如：</p><pre><code>`printf()` 函数</code></pre><p><code>printf()</code> 函数</p><h2 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h2><p>代码区块使用 4 个空格或者一个制表符（Tab 键）</p><pre><code>    $(document).ready(function () {    alert('RUNOOB');    });</code></pre><pre><code>$(document).ready(function () {alert('RUNOOB');});</code></pre><p>也可以用 ``` 包裹一段代码，并指定一种语言（也可以不指定）：</p><pre><code>```javascript$(document).ready(function () {    alert('RUNOOB');});```</code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'RUNOOB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="P07-Markdown-链接"><a href="#P07-Markdown-链接" class="headerlink" title="P07 Markdown 链接"></a>P07 Markdown 链接</h1><p>链接使用方法如下：</p><pre><code>[链接名称](链接地址)或者&lt;链接地址&gt;</code></pre><p>例如：</p><pre><code>这是一个链接 [菜鸟教程](https://www.runoob.com)</code></pre><p>显示结果如下：</p><p>这是一个链接 <a href="https://www.runoob.com/">菜鸟教程</a></p><blockquote><p>直接使用链接地址：</p></blockquote><pre><code>&lt;https://www.runoob.com&gt;</code></pre><p><a href="https://www.runoob.com/">https://www.runoob.com</a></p><h2 id="高级链接"><a href="#高级链接" class="headerlink" title="高级链接"></a>高级链接</h2><pre><code>链接也可以用变量来代替，文档末尾附带变量地址：这个链接用 1 作为网址变量 [Google][1]这个链接用 runoob 作为网址变量 [Runoob][runoob]然后在文档的结尾为变量赋值（网址）  [1]: http://www.google.com/  [runoob]: http://www.runoob.com/</code></pre><p>这个链接用 1 作为网址变量 <a href="http://www.google.com/">Google</a><br>这个链接用 runoob 作为网址变量 <a href="http://www.runoob.com/">Runoob</a></p><h1 id="P08-Markdown-图片"><a href="#P08-Markdown-图片" class="headerlink" title="P08 Markdown 图片"></a>P08 Markdown 图片</h1><p>Markdown 图片语法格式如下：</p><pre><code>![alt 属性文本](图片地址)![alt 属性文本](图片地址 "可选标题")</code></pre><blockquote><p>开头一个感叹号 !</p></blockquote><blockquote><p>接着一个方括号，里面放上图片的替代文字</p></blockquote><blockquote><p>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。</p></blockquote><p>例：</p><pre><code>![RUNOOB 图标](http://static.runoob.com/images/runoob-logo.png)![RUNOOB 图标](http://static.runoob.com/images/runoob-logo.png "RUNOOB")</code></pre><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标"></p><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标" title="RUNOOB"></p><p>也可以像网址那样对图片网址使用变量:</p><p>例：</p><pre><code>这个链接用 1 作为网址变量 [RUNOOB][1].然后在文档的结尾为变量赋值（网址）[1]: http://static.runoob.com/images/runoob-logo.png</code></pre><p>这个链接用 1 作为网址变量 <a href="http://static.runoob.com/images/runoob-logo.png">RUNOOB</a>.</p><blockquote><p>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <code>img</code> 标签。、</p></blockquote><p>例：</p><pre><code>&lt;img src="http://static.runoob.com/images/runoob-logo.png" width="50%"&gt;</code></pre><img src="http://static.runoob.com/images/runoob-logo.png" width="50%"><h1 id="P09-Markdown-表格"><a href="#P09-Markdown-表格" class="headerlink" title="P09 Markdown 表格"></a>P09 Markdown 表格</h1><p>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。</p><pre><code>|  表头   | 表头  ||  ----  | ----  || 单元格  | 单元格 || 单元格  | 单元格 |</code></pre><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><blockquote><p>对齐方式</p></blockquote><p>我们可以设置表格的对齐方式：</p><ul><li>-: 设置内容和标题栏居右对齐。</li><li>:- 设置内容和标题栏居左对齐。</li><li>:-: 设置内容和标题栏居中对齐。</li></ul><p>例：</p><pre><code>| 左对齐 | 右对齐 | 居中对齐 || :-----| ----: | :----: || 单元格 | 单元格 | 单元格 || 单元格 | 单元格 | 单元格 |</code></pre><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><h1 id="P10-Markdown-高级技巧"><a href="#P10-Markdown-高级技巧" class="headerlink" title="P10 Markdown 高级技巧"></a>P10 Markdown 高级技巧</h1><h2 id="支持的-HTML-元素"><a href="#支持的-HTML-元素" class="headerlink" title="支持的 HTML 元素"></a>支持的 HTML 元素</h2><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p><p>目前支持的 HTML 元素有：<code>&lt;kbd&gt;</code> <code>&lt;b&gt;</code> <code>&lt;i&gt;</code> <code>&lt;em&gt;</code> <code>&lt;sup&gt;</code> <code>&lt;sub&gt;</code> <code>&lt;br&gt;</code>等</p><p>如：</p><pre><code>使用 &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑</code></pre><p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p><h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p><p>例：</p><pre><code>**文本加粗** \*\* 正常显示星号 \*\*</code></pre><p><strong>文本加粗</strong><br>** 正常显示星号 **</p><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><pre><code>\   反斜线`   反引号*   星号_   下划线{}  花括号[]  方括号()  小括号#   井字号+   加号-   减号.   英文句点!   感叹号</code></pre><h1 id="P11-视频"><a href="#P11-视频" class="headerlink" title="P11 视频"></a>P11 视频</h1><pre><code>&lt;video src="https://v-cdn.zjol.com.cn/276985.mp4" controls="controls" width="100%"&gt;您的浏览器不支持播放该视频！&lt;/video&gt;</code></pre><p><video src="http://wxsnsdy.tc.qq.com/105/20210/snsdyvideodownload?filekey=30280201010421301f0201690402534804102ca905ce620b1241b726bc41dcff44e00204012882540400&amp;bizid=1023&amp;hy=SH&amp;fileparam=302c020101042530230204136ffd93020457e3c4ff02024ef202031e8d7f02030f42400204045a320a0201000400" controls="controls" width="100%">您的浏览器不支持播放该视频！</video></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用学习网站</title>
      <link href="2021/04/02/%E5%B8%B8%E7%94%A8%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99/"/>
      <url>2021/04/02/%E5%B8%B8%E7%94%A8%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<p>Welcome to [Hexo]</p><h1 id="常用学习网站"><a href="#常用学习网站" class="headerlink" title="常用学习网站"></a>常用学习网站</h1><h2 id="1-W3school"><a href="#1-W3school" class="headerlink" title="1.W3school"></a>1.W3school</h2><p>领先的 Web 技术教程 - 全部免费。</p><p>在 W3School，你可以找到你所需要的所有的网站建设教程。</p><p>从基础的 HTML 到 CSS，乃至进阶的 XML、SQL、JS、PHP 和 ASP .NET。</p><p><a href="https://www.w3school.com.cn/" target="_blank">W3school</a></p><hr><h2 id="2-菜鸟教程"><a href="#2-菜鸟教程" class="headerlink" title="2.菜鸟教程"></a>2.菜鸟教程</h2><p>和W3school一样丰富的学习网站</p><p><a href="https://www.runoob.com/" target="_blank">菜鸟教程</a></p><hr><h2 id="3-React"><a href="#3-React" class="headerlink" title="3.React"></a>3.React</h2><p>React 使创建交互式 UI 变得轻而易举。为你应用的每一个状态设计简洁的视图，当数据改变时 React 能有效地更新并正确地渲染组件。以声明式编写 UI，可以让你的代码更加可靠，且方便调试。</p><p><a href="https://zh-hans.reactjs.org/" target="_blank">React</a></p><hr><h2 id="4-VUE"><a href="#4-VUE" class="headerlink" title="4.VUE"></a>4.VUE</h2><p>不断繁荣的生态系统，可以在一个库和一套完整框架之间自如伸缩。</p><p>20kB min+gzip 运行大小超快虚拟 DOM最省心的优化。</p><p><a href="https://cn.vuejs.org/" target="_blank">VUE</a></p><hr><h2 id="5-Bootstrap"><a href="#5-Bootstrap" class="headerlink" title="5.Bootstrap"></a>5.Bootstrap</h2><p>Bootstrap 是最受欢迎的 HTML、CSS 和 JS 框架，用于开发响应式布局、移动设备优先的 WEB 项目。</p><p><a href="https://v3.bootcss.com/" target="_blank">Bootstrap</a></p><hr><h2 id="6-Layui"><a href="#6-Layui" class="headerlink" title="6.Layui"></a>6.Layui</h2><p>经典模块化前端框架</p><p>由职业前端倾情打造，面向全层次的前后端开发者，低门槛开箱即用的前端 UI 解决方案。</p><p><a href="https://www.layui.com/" target="_blank">Layui</a></p><hr><h2 id="7-Ant-Design-UI"><a href="#7-Ant-Design-UI" class="headerlink" title="7.Ant Design UI"></a>7.Ant Design UI</h2><p>主要用于研发企业级中后台产品。</p><p><a href="https://ant.design/index-cn" target="_blank">Ant Design</a></p><hr><h2 id="8-Element-UI"><a href="#8-Element-UI" class="headerlink" title="8.Element UI"></a>8.Element UI</h2><p>Element，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库</p><p><a href="https://element.eleme.cn/#/zh-CN" target="_blank">Element UI</a></p><hr><h2 id="9-Lin-UI"><a href="#9-Lin-UI" class="headerlink" title="9.Lin UI"></a>9.Lin UI</h2><p>Lin UI 是基于 微信小程序原生语法 实现的组件库。遵循简洁，易用的设计规范。</p><p><a href="http://doc.mini.7yue.pro/" target="_blank">Lin UI</a></p><hr><h2 id="10-uni-app"><a href="#10-uni-app" class="headerlink" title="10.uni-app"></a>10.uni-app</h2><p>uni-app 是一个使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、H5、以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉）等多个平台。</p><p><a href="https://uniapp.dcloud.io/" target="_blank">uni-app</a></p><hr><h2 id="11-Taro-UI"><a href="#11-Taro-UI" class="headerlink" title="11.Taro UI"></a>11.Taro UI</h2><p>Taro UI 一套基于 Taro 框架开发的多端 UI 组件库</p><p><a href="https://taro-ui.jd.com/#/" target="_blank"> Taro UI</a></p><hr><h2 id="12-Weex"><a href="#12-Weex" class="headerlink" title="12.Weex"></a>12.Weex</h2><p>Weex 是一个可以使用现代化的 Web 技术开发高性能原生应用的框架。</p><p><a href="https://weex.apache.org/zh/" target="_blank">Weex</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="2021/04/01/text/"/>
      <url>2021/04/01/text/</url>
      
        <content type="html"><![CDATA[<p>Welcome to [Hexo]</p><h1 id="P01-Markdown-简介"><a href="#P01-Markdown-简介" class="headerlink" title="P01 Markdown 简介"></a>P01 Markdown 简介</h1><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p><p>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。</p><p>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</p><p>Markdown 编写的文档后缀为 <kbd>.md</kbd>或<kbd>.markdown</kbd>。</p><h1 id="P02-Markdown-标题"><a href="#P02-Markdown-标题" class="headerlink" title="P02 Markdown 标题"></a>P02 Markdown 标题</h1><p>Markdown 标题有两种格式。</p><blockquote><p>1.使用 = 和 - 标记一级和二级标题</p></blockquote><pre><code>我展示的是一级标题=================我展示的是二级标题-----------------</code></pre><h1 id="我展示的是一级标题"><a href="#我展示的是一级标题" class="headerlink" title="我展示的是一级标题"></a>我展示的是一级标题</h1><h2 id="我展示的是二级标题"><a href="#我展示的是二级标题" class="headerlink" title="我展示的是二级标题"></a>我展示的是二级标题</h2><blockquote><p>2.使用 # 号标记</p></blockquote><p>使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。</p>```## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题```## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题<h1 id="P03-Markdown-段落"><a href="#P03-Markdown-段落" class="headerlink" title="P03 Markdown 段落"></a>P03 Markdown 段落</h1><p>Markdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车。</p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>Markdown 可以使用以下几种字体</p><pre><code>*斜体文本*_斜体文本_**粗体文本**__粗体文本__***粗斜体文本***___粗斜体文本___</code></pre><p>显示效果如下所示：</p><p><em>斜体文本</em><br><em>斜体文本</em><br><strong>粗体文本</strong><br><strong>粗体文本</strong><br><strong><em>粗斜体文本</em></strong><br><strong><em>粗斜体文本</em></strong></p><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><pre><code>**** * ******- - -----------</code></pre><hr><hr><hr><hr><hr><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ 即可，实例如下：</p><pre><code>~~BAIDU.COM~~</code></pre><p><del>BAIDU.COM</del></p><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><p>下划线可以通过 HTML 的 <code>&lt;u&gt;</code> 标签来实现：</p><pre><code>&lt;u&gt;带下划线文本&lt;/u&gt;</code></pre><p><u>带下划线文本</u></p><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>脚注是对文本的补充说明。</p><pre><code>创建脚注格式类似这样 [^RUNOOB]。[^RUNOOB]: 菜鸟教程 -- 学的不仅是技术，更是梦想！！！</code></pre><p>创建脚注格式类似这样 [^runoob]。</p><p>[^runoob]: 菜鸟教程 – 学的不仅是技术，更是梦想！！！</p><h1 id="P04-Markdown-列表"><a href="#P04-Markdown-列表" class="headerlink" title="P04 Markdown 列表"></a>P04 Markdown 列表</h1><p>Markdown 支持有序列表和无序列表。</p><p>无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记：</p><pre><code>* 第一项* 第二项* 第三项+ 第一项+ 第二项+ 第三项- 第一项- 第二项- 第三项</code></pre><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><p>有序列表使用数字并加上 . 号来表示，如</p><pre><code>1. 第一项2. 第二项3. 第三项</code></pre><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><h2 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h2><pre><code>1. 第一项：    - 第一项嵌套的第一个元素    - 第一项嵌套的第二个元素2. 第二项：    - 第二项嵌套的第一个元素    - 第二项嵌套的第二个元素</code></pre><ol><li>第一项：<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li><li>第二项：<ul><li>第二项嵌套的第一个元素</li><li>第二项嵌套的第二个元素</li></ul></li></ol><h1 id="P05-Markdown-区块"><a href="#P05-Markdown-区块" class="headerlink" title="P05 Markdown 区块"></a>P05 Markdown 区块</h1><p>Markdown 区块引用是在段落开头使用 <code>&gt;</code> 符号 ，然后后面紧跟一个空格符号：</p><pre><code>&gt; 区块引用&gt; 菜鸟教程&gt; 学的不仅是技术更是梦想</code></pre><blockquote><p>区块引用<br>菜鸟教程<br>学的不仅是技术更是梦想</p></blockquote><p>另外区块是可以嵌套的，一个 <code>&gt;</code> 符号是最外层，两个 <code>&gt;</code> 符号是第一层嵌套，以此类推：</p><pre><code>&gt; 最外层&gt; &gt; 第一层嵌套&gt; &gt; &gt; 第二层嵌套</code></pre><blockquote><p>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第二层嵌套</p></blockquote></blockquote></blockquote><h2 id="区块中使用列表"><a href="#区块中使用列表" class="headerlink" title="区块中使用列表"></a>区块中使用列表</h2><p>区块中使用列表实例如下：</p><pre><code>&gt; 区块中使用列表&gt; 1. 第一项&gt; 2. 第二项&gt; + 第一项&gt; + 第二项&gt; + 第三项</code></pre><blockquote><p>区块中使用列表</p><ol><li>第一项</li><li>第二项</li></ol><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><h2 id="列表中使用区块"><a href="#列表中使用区块" class="headerlink" title="列表中使用区块"></a>列表中使用区块</h2><p>如果要在列表项目内放进区块，那么就需要在 <code>&gt;</code> 前添加四个空格的缩进。</p><p>区块中使用列表实例如下：</p><pre><code>* 第一项    &gt; 菜鸟教程    &gt; 学的不仅是技术更是梦想* 第二项</code></pre><ul><li>第一项<blockquote><p>菜鸟教程<br>学的不仅是技术更是梦想</p></blockquote></li><li>第二项</li></ul><h1 id="P06-Markdown-代码"><a href="#P06-Markdown-代码" class="headerlink" title="P06 Markdown 代码"></a>P06 Markdown 代码</h1><p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来<kbd>`</kbd>，例如：</p><pre><code>`printf()` 函数</code></pre><p><code>printf()</code> 函数</p><h2 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h2><p>代码区块使用 4 个空格或者一个制表符（Tab 键）</p><pre><code>    $(document).ready(function () {    alert('RUNOOB');    });</code></pre><pre><code>$(document).ready(function () {alert('RUNOOB');});</code></pre><p>也可以用 ``` 包裹一段代码，并指定一种语言（也可以不指定）：</p><pre><code>```javascript$(document).ready(function () {    alert('RUNOOB');});```</code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'RUNOOB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="P07-Markdown-链接"><a href="#P07-Markdown-链接" class="headerlink" title="P07 Markdown 链接"></a>P07 Markdown 链接</h1><p>链接使用方法如下：</p><pre><code>[链接名称](链接地址)或者&lt;链接地址&gt;</code></pre><p>例如：</p><pre><code>这是一个链接 [菜鸟教程](https://www.runoob.com)</code></pre><p>显示结果如下：</p><p>这是一个链接 <a href="https://www.runoob.com/">菜鸟教程</a></p><blockquote><p>直接使用链接地址：</p></blockquote><pre><code>&lt;https://www.runoob.com&gt;</code></pre><p><a href="https://www.runoob.com/">https://www.runoob.com</a></p><h2 id="高级链接"><a href="#高级链接" class="headerlink" title="高级链接"></a>高级链接</h2><pre><code>链接也可以用变量来代替，文档末尾附带变量地址：这个链接用 1 作为网址变量 [Google][1]这个链接用 runoob 作为网址变量 [Runoob][runoob]然后在文档的结尾为变量赋值（网址）  [1]: http://www.google.com/  [runoob]: http://www.runoob.com/</code></pre><p>这个链接用 1 作为网址变量 <a href="http://www.google.com/">Google</a><br>这个链接用 runoob 作为网址变量 <a href="http://www.runoob.com/">Runoob</a></p><h1 id="P08-Markdown-图片"><a href="#P08-Markdown-图片" class="headerlink" title="P08 Markdown 图片"></a>P08 Markdown 图片</h1><p>Markdown 图片语法格式如下：</p><pre><code>![alt 属性文本](图片地址)![alt 属性文本](图片地址 "可选标题")</code></pre><blockquote><p>开头一个感叹号 !</p></blockquote><blockquote><p>接着一个方括号，里面放上图片的替代文字</p></blockquote><blockquote><p>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。</p></blockquote><p>例：</p><pre><code>![RUNOOB 图标](http://static.runoob.com/images/runoob-logo.png)![RUNOOB 图标](http://static.runoob.com/images/runoob-logo.png "RUNOOB")</code></pre><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标"></p><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标" title="RUNOOB"></p><p>也可以像网址那样对图片网址使用变量:</p><p>例：</p><pre><code>这个链接用 1 作为网址变量 [RUNOOB][1].然后在文档的结尾为变量赋值（网址）[1]: http://static.runoob.com/images/runoob-logo.png</code></pre><p>这个链接用 1 作为网址变量 <a href="http://static.runoob.com/images/runoob-logo.png">RUNOOB</a>.</p><blockquote><p>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <code>img</code> 标签。、</p></blockquote><p>例：</p><pre><code>&lt;img src="http://static.runoob.com/images/runoob-logo.png" width="50%"&gt;</code></pre><img src="http://static.runoob.com/images/runoob-logo.png" width="50%"><h1 id="P09-Markdown-表格"><a href="#P09-Markdown-表格" class="headerlink" title="P09 Markdown 表格"></a>P09 Markdown 表格</h1><p>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。</p><pre><code>|  表头   | 表头  ||  ----  | ----  || 单元格  | 单元格 || 单元格  | 单元格 |</code></pre><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><blockquote><p>对齐方式</p></blockquote><p>我们可以设置表格的对齐方式：</p><ul><li>-: 设置内容和标题栏居右对齐。</li><li>:- 设置内容和标题栏居左对齐。</li><li>:-: 设置内容和标题栏居中对齐。</li></ul><p>例：</p><pre><code>| 左对齐 | 右对齐 | 居中对齐 || :-----| ----: | :----: || 单元格 | 单元格 | 单元格 || 单元格 | 单元格 | 单元格 |</code></pre><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><h1 id="P10-Markdown-高级技巧"><a href="#P10-Markdown-高级技巧" class="headerlink" title="P10 Markdown 高级技巧"></a>P10 Markdown 高级技巧</h1><h2 id="支持的-HTML-元素"><a href="#支持的-HTML-元素" class="headerlink" title="支持的 HTML 元素"></a>支持的 HTML 元素</h2><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p><p>目前支持的 HTML 元素有：<code>&lt;kbd&gt;</code> <code>&lt;b&gt;</code> <code>&lt;i&gt;</code> <code>&lt;em&gt;</code> <code>&lt;sup&gt;</code> <code>&lt;sub&gt;</code> <code>&lt;br&gt;</code>等</p><p>如：</p><pre><code>使用 &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑</code></pre><p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p><h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p><p>例：</p><pre><code>**文本加粗** \*\* 正常显示星号 \*\*</code></pre><p><strong>文本加粗</strong><br>** 正常显示星号 **</p><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><pre><code>\   反斜线`   反引号*   星号_   下划线{}  花括号[]  方括号()  小括号#   井字号+   加号-   减号.   英文句点!   感叹号</code></pre><h1 id="P11-视频"><a href="#P11-视频" class="headerlink" title="P11 视频"></a>P11 视频</h1><pre><code>&lt;video src="https://v-cdn.zjol.com.cn/276985.mp4" controls="controls" width="100%"&gt;您的浏览器不支持播放该视频！&lt;/video&gt;</code></pre><p><video src="http://wxsnsdy.tc.qq.com/105/20210/snsdyvideodownload?filekey=30280201010421301f0201690402534804102ca905ce620b1241b726bc41dcff44e00204012882540400&amp;bizid=1023&amp;hy=SH&amp;fileparam=302c020101042530230204136ffd93020457e3c4ff02024ef202031e8d7f02030f42400204045a320a0201000400" controls="controls" width="100%">您的浏览器不支持播放该视频！</video></p>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> npm </tag>
            
            <tag> nvm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
